import React,{useState, useEffect} from 'react'
import Head from 'next/head'
import { Row, Col, List, Breadcrumb, Layout, BackTop} from 'antd'
import '../node_modules/antd/dist/antd.css'
import { CalendarOutlined, FolderOpenOutlined, FireOutlined, UpOutlined } from '@ant-design/icons'
import axios from 'axios'
import Link from 'next/link'
import servicePath from '../config/apiURL'
import { Header } from 'antd/lib/layout/layout'
import Intro from '../components/Intro'
import CustomMenu from '../components/customMenu'
import {PandaIcon} from '../components/costumIcon';

const {Content} = Layout;

export default function MyList(list) {
  // 必须传一个被对象包裹的数组 如果直接传数组 会变成一个对象包裹着具体的数据对象
  // 此时list参数是一个数组 就视频教程分类而言 其中有两个对象 是数据库中的两个测试用例 
  const [myList, setMyList] = useState(list.data)
  useEffect(() => {
    setMyList(list.data)
  })
  return (
    <div>
      <Head>
        <title>List</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Layout style={{backgroundColor:'#fff'}}>
        <Header style={{width:'100%', height:'20%', backgroundColor:'#1890ff'}}>
          <Intro />
        </Header>
        <Layout>
          <Header style={{backgroundColor:'#fff'}}>
            <CustomMenu />
          </Header>
          <Content style={{backgroundColor:'#fff'}}>
            <Row className='comm-main' type='flex' justify='center'>
              <Col className='comm-left' xs={24} sm={24} md={16} lg={16} xl={14}>
              <div className='icon-box'>
                  <PandaIcon
                    style={{
                    fontSize: '24px',
                  }}
                  /> 
                  <span className='icon-title'>The most recent:</span> 
              </div>
              <List
                itemLayout='vertical'
                dataSource={myList}
                renderItem={(item) => (
                  <List.Item>
                    <div className='list-title'>
                      <Link href={{ pathname: '/detailed', query: { id: item.id } }}>
                        <a>{item.title}</a>
                      </Link>
                    </div>
                    <div className='list-icon'>
                      <span className='date'><CalendarOutlined />&nbsp;{item.add_time}</span>
                      <span className='type'><FolderOpenOutlined />&nbsp;{item.typeName}</span>
                    </div>
                    <div className='list-context'>{ item.introduction}</div>
                  </List.Item>
                )}
              />
              </Col>
            </Row>
          </Content>
        </Layout>
        <BackTop>
          <div className='back2top'><UpOutlined /></div>
        </BackTop>
      </Layout>
    </div>
  )
}

MyList.getInitialProps = async (context) => {
  let id = context.query.id;
  const promise = new Promise((resolve) => {
    axios(servicePath.getListById + id).then(
      (res) => {
        // 此时的res：{data:{data:[{obj1}, {obj2}]} ...}
        console.log(res)
        return resolve(res.data)
        // 此处根据res结构 只能返回res.data 即返回一个对象 然后在组件中用list.data解构获取具体数据 直接list.data.data 这个数组会被转换成一个对象
      }
    )
  })
  return await promise;
}