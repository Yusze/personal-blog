import React,{useState, useEffect} from 'react'
import Head from 'next/head'
import { Row, Col, List, Breadcrumb} from 'antd'
import '../node_modules/antd/dist/antd.css'
import { CalendarOutlined, FolderOpenOutlined, FireOutlined } from '@ant-design/icons'
import axios from 'axios'
import Link from 'next/link'
import servicePath from '../config/apiURL'
import Header from '../components/Header/index.js'
import Author from '../components/Author/index.js'
import Advert from '../components/Advert/index.js'
import Footer from '../components/Footer/index.js'



export default function MyList(list) {
  // 必须传一个被对象包裹的数组 如果直接传数组 会变成一个对象包裹着具体的数据对象
  // 此时list参数是一个数组 就视频教程分类而言 其中有两个对象 是数据库中的两个测试用例 
  const [myList, setMyList] = useState(list.data)
  useEffect(() => {
    setMyList(list.data)
  })
  return (
    <div>
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <Header />
      <Row className='comm-main' type='flex' justify='center'>
        <Col className='comm-left' xs={24} sm={24} md={16} lg={18} xl={14}>
          
          <div className='bread-div'>
            <Breadcrumb>
              <Breadcrumb.Item>
                <a href="/">首页</a>
              </Breadcrumb.Item>
              <Breadcrumb.Item>
                {myList[0].typeName}
              </Breadcrumb.Item>
            </Breadcrumb>
          </div>

          <List
            header={<div>最新日志</div>}
            itemLayout='vertical'
            dataSource={myList}
            renderItem={(item) => (
              <List.Item>
                <div className='list-title'>
                  <Link href={{ pathname: '/detailed', query: { id: item.id } }}>
                    <a>{item.title}</a>
                  </Link>
                </div>
                <div className='list-icon'>
                  <span><CalendarOutlined />&nbsp;{item.add_time}</span>
                  <span><FolderOpenOutlined />&nbsp;{item.typeName}</span>
                  <span><FireOutlined />&nbsp;{item.view_count}</span>
                </div>
                <div className='list-context'>{ item.introduction}</div>
              </List.Item>
            )}
          />
        </Col>
        <Col className='comm-right' xs={0} sm={0} md={7} lg={5} xl={4}>
          <Author />
          <Advert />
        </Col>
      </Row>
      <Footer />
    </div>
  )
}

MyList.getInitialProps = async (context) => {
  let id = context.query.id;
  const promise = new Promise((resolve) => {
    axios(servicePath.getListById + id).then(
      (res) => {
        // 此时的res：{data:{data:[{obj1}, {obj2}]} ...}
        console.log(res)
        return resolve(res.data)
        // 此处根据res结构 只能返回res.data 即返回一个对象 然后在组件中用list.data解构获取具体数据 直接list.data.data 这个数组会被转换成一个对象
      }
    )
  })
  return await promise;
}